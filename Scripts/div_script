#open script in Blender Text Editor and play 'Run Script'

import bpy
import numpy

def cut_new_chunk(source_shape, big_cube):
    new_obj = source_shape.copy()
    new_obj.data = source_shape.data.copy()
    new_obj.animation_data_clear()
    bpy.context.scene.objects.link(new_obj)

    cut1 = source_shape.modifiers.new(name='Cut1', type='BOOLEAN')
    cut1.object = big_cube
    cut1.operation= 'DIFFERENCE'
    bpy.context.scene.objects.active = source_shape
    bpy.ops.object.modifier_apply(apply_as='DATA', modifier = 'Cut1')

    cut2 = new_obj.modifiers.new(name='Cut2', type='BOOLEAN')
    cut2.object = big_cube
    cut2.operation= 'INTERSECT'
    bpy.context.scene.objects.active = new_obj
    bpy.ops.object.modifier_apply(apply_as='DATA', modifier = 'Cut2')
    
    return new_obj

step = 0.7



#get main object
obj = bpy.context.selected_objects[0]
bpy.context.scene.objects.active = obj
bpy.ops.object.transform_apply( rotation = True )

#create mega cube
center = obj.location
height = obj.dimensions.z
width = obj.dimensions.y
depth = obj.dimensions.x

bpy.ops.mesh.primitive_cube_add()
cube = bpy.context.scene.objects.active 
cube.scale = (100, 100, 100)

#chunks array
chunks = []

#dividing with z-translation
cube.location=(center.x, center.y, center.z + 100 + height/2)

i = step
while i < height:
    cube.location.z -= step    
    chunks.append(cut_new_chunk(obj, cube))
    i += step

chunks.append(obj)

#dividing with y-translation
cube.location=(center.x, center.y + 100 + width/2, center.z)

i = step
chunks_number = len(chunks)
while i < width:
    cube.location.y -= step    
    for k in range(0, chunks_number):
        chunks.append(cut_new_chunk(chunks[k], cube))
    i += step

#dividing with x-translation
cube.location=(center.x + 100 + depth/2, center.y, center.z)

i = step
chunks_number = len(chunks)
while i < depth:
    cube.location.x -= step    
    for k in range(0, chunks_number):
        chunks.append(cut_new_chunk(chunks[k], cube))
    i += step

#delete mega cube
bpy.ops.object.select_all(action='DESELECT')
cube.select = True
bpy.ops.object.delete() 

#clean meshes
for chunk in chunks:
    bpy.ops.object.select_all(action='DESELECT')
    chunk.select = True
    bpy.context.scene.objects.active = chunk
    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.mesh.select_all(action='DESELECT')
    for v in chunk.data.vertices:
        if abs(v.co[0] - center.x) > depth/2 or abs(v.co[1] - center.y) > width/2 or abs(v.co[2] - center.z) > height/2:
            v.select = True
    bpy.ops.mesh.delete(type='VERT')
    bpy.ops.object.mode_set(mode='OBJECT') 

#output array
out = numpy.zeros((int(depth/step)+2, int(width/step)+2, int(height/step)+2))
for chunk in chunks:
    bpy.context.scene.objects.active = chunk
    chunk.select = True
    bpy.ops.object.origin_set(type='ORIGIN_GEOMETRY', center='MEDIAN')
    out[int((chunk.location.x - (center.x - depth/2))/step), int((chunk.location.y - (center.y - width/2))/step), int((chunk.location.z - (center.z - height/2))/step)] = 1
